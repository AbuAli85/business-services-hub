-- Migration: Fix RLS policies for enriched views
-- Description: Enable security_invoker on views and set up proper access control
-- Date: 2025-01-25

-- Ensure views execute with caller rights (inherits RLS from base tables)
ALTER VIEW public.booking_enriched SET (security_invoker = true);
ALTER VIEW public.service_enriched SET (security_invoker = true);
ALTER VIEW public.user_enriched SET (security_invoker = true);

-- Grant read access at the view level
GRANT SELECT ON public.booking_enriched TO authenticated, anon;
GRANT SELECT ON public.service_enriched TO authenticated, anon;
GRANT SELECT ON public.user_enriched TO authenticated, anon;

-- Note: RLS policies should be defined on the base tables (services, bookings, profiles)
-- The views will inherit these policies through security_invoker = true
-- 
-- Example base table policies (uncomment and adjust as needed):
--
-- Services base table
-- ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Service read" ON public.services
--   FOR SELECT TO authenticated
--   USING (
--     (auth.role() = 'service_role')
--     OR EXISTS (
--       SELECT 1 FROM public.user_roles_v2 ur
--       JOIN public.roles_v2 r ON ur.role_id = r.id
--       WHERE ur.user_id = auth.uid()
--         AND ur.is_active = true
--         AND r.name = 'admin'
--     )
--     OR (
--       EXISTS (
--         SELECT 1 FROM public.user_roles_v2 ur
--         JOIN public.roles_v2 r ON ur.role_id = r.id
--         WHERE ur.user_id = auth.uid()
--           AND ur.is_active = true
--           AND r.name = 'provider'
--       ) AND services.provider_id = auth.uid()
--     )
--     OR (
--       EXISTS (
--         SELECT 1 FROM public.user_roles_v2 ur
--         JOIN public.roles_v2 r ON ur.role_id = r.id
--         WHERE ur.user_id = auth.uid()
--           AND ur.is_active = true
--           AND r.name = 'client'
--       ) AND services.status = 'active'
--     )
--   );
--
-- Bookings base table
-- ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Booking read" ON public.bookings
--   FOR SELECT TO authenticated
--   USING (
--     (auth.role() = 'service_role')
--     OR EXISTS (
--       SELECT 1 FROM public.user_roles_v2 ur
--       JOIN public.roles_v2 r ON ur.role_id = r.id
--       WHERE ur.user_id = auth.uid()
--         AND ur.is_active = true
--         AND r.name = 'admin'
--     )
--     OR (
--       EXISTS (
--         SELECT 1 FROM public.user_roles_v2 ur
--         JOIN public.roles_v2 r ON ur.role_id = r.id
--         WHERE ur.user_id = auth.uid()
--           AND ur.is_active = true
--           AND r.name = 'provider'
--       ) AND bookings.provider_id = auth.uid()
--     )
--     OR (
--       EXISTS (
--         SELECT 1 FROM public.user_roles_v2 ur
--         JOIN public.roles_v2 r ON ur.role_id = r.id
--         WHERE ur.user_id = auth.uid()
--           AND ur.is_active = true
--           AND r.name = 'client'
--       ) AND bookings.client_id = auth.uid()
--     )
--   );
--
-- Profiles base table
-- ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Profile read" ON public.profiles
--   FOR SELECT TO authenticated
--   USING (
--     (auth.role() = 'service_role')
--     OR EXISTS (
--       SELECT 1 FROM public.user_roles_v2 ur
--       JOIN public.roles_v2 r ON ur.role_id = r.id
--       WHERE ur.user_id = auth.uid()
--         AND ur.is_active = true
--         AND r.name = 'admin'
--     )
--     OR profiles.id = auth.uid()
--   );
